!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AlarmExit	Mtbf.cpp	/^bool AlarmExit 			= false;$/;"	v
BROADCAST	Mtbf.cpp	/^	BROADCAST,$/;"	e	enum:__anon1	file:
DESTROY	Mtbf.cpp	/^	DESTROY$/;"	e	enum:__anon1	file:
EndPro	Mtbf.cpp	/^	static void EndPro(int s)$/;"	f	struct:MGroupBase
FILENAME	main.cpp	12;"	d	file:
Groupptr	Mtbf.cpp	/^class MtbfGroup *Groupptr 	= nullptr;$/;"	v	typeref:class:MtbfGroup
INIT	Mtbf.cpp	/^	INIT = 0X00000001UL,$/;"	e	enum:__anon1	file:
MDATA	Mtbf.cpp	/^MDATA(Mtbf)$/;"	f
MDATA	Mtbf.cpp	/^MDATA(MtbfGroup)$/;"	f
MDATA	Mtbf.h	3;"	d
MGroupBase	Mtbf.cpp	/^	MGroupBase()$/;"	f	struct:MGroupBase
MGroupBase	Mtbf.cpp	/^struct MGroupBase$/;"	s	file:
MGroupExit	Mtbf.cpp	/^bool MGroupExit 		= false;$/;"	v
MMAXGROUP	Mtbf.cpp	19;"	d	file:
MMAXTOKENS	Mtbf.h	4;"	d
MainMtbfGroup	Mtbf.cpp	/^} MainMtbfGroup;$/;"	v	typeref:struct:MGroupBase
Mcout	Mtbf.cpp	/^void Mcout(T str)$/;"	f
Mtbf	Mtbf.cpp	/^MDATA(Mtbf);$/;"	v
Mtbf	Mtbf.cpp	/^Mtbf::Mtbf():d(nullptr){}$/;"	f	class:Mtbf
Mtbf	Mtbf.cpp	/^Mtbf::Mtbf(int s, int *pos, int tokens)$/;"	f	class:Mtbf
Mtbf	Mtbf.h	/^MDATA(Mtbf);$/;"	v
Mtbf	Mtbf.h	/^class Mtbf$/;"	c
MtbfGroup	Mtbf.cpp	/^	Mtbf* MtbfGroup[MMAXGROUP];$/;"	m	struct:MGroupBase	file:
MtbfGroup	Mtbf.cpp	/^MtbfGroup::MtbfGroup()$/;"	f	class:MtbfGroup
MtbfGroup	Mtbf.h	/^MDATA(MtbfGroup);$/;"	v
MtbfGroup	Mtbf.h	/^class MtbfGroup$/;"	c
MtbfGrouplock	Mtbf.cpp	/^	pthread_mutex_t MtbfGrouplock;$/;"	m	struct:MGroupBase	file:
Pdata	Mtbf.h	/^	struct PrivateData* Pdata;$/;"	m	class:Mtbf	typeref:struct:Mtbf::PrivateData
PrivateData	Mtbf.h	/^struct PrivateData$/;"	s
PrivateFun	Mtbf.cpp	/^struct PrivateFun$/;"	s	file:
SIGNAL	Mtbf.cpp	/^	SIGNAL,$/;"	e	enum:__anon1	file:
TIMEDWAIT	Mtbf.cpp	/^	TIMEDWAIT,$/;"	e	enum:__anon1	file:
TbfStart	Mtbf.cpp	/^int Mtbf::TbfStart()$/;"	f	class:Mtbf
Tbfstop	Mtbf.cpp	/^int Mtbf::Tbfstop()$/;"	f	class:Mtbf
WAIT	Mtbf.cpp	/^	WAIT,$/;"	e	enum:__anon1	file:
baseptr	Mtbf.cpp	/^struct MGroupBase *baseptr 	= nullptr;$/;"	v	typeref:struct:MGroupBase
condattr	Mtbf.cpp	/^	pthread_condattr_t condattr;\/\/设置条件变量的属性$/;"	m	struct:MGroupBase	file:
createFun	Mtbf.cpp	/^struct PrivateData* createFun(Mtbf* tbf)$/;"	f
createTbf	Mtbf.cpp	/^void Mtbf::createTbf(int s, int *pos, int tokens)$/;"	f	class:Mtbf
d	Mtbf.h	/^	MDATA(Mtbf) *d;$/;"	m	class:Mtbf
d	Mtbf.h	/^	MDATA(MtbfGroup) *d;$/;"	m	class:MtbfGroup
data	Mtbf.cpp	/^	struct PrivateData data;$/;"	m	struct:PrivateFun	typeref:struct:PrivateFun::PrivateData	file:
data	Mtbf.h	/^	void *data;$/;"	m	struct:PrivateData
destoryFun	Mtbf.cpp	/^void destoryFun(struct PrivateData* ptr)$/;"	f
destoryToken	Mtbf.cpp	/^int  Mtbf::destoryToken()$/;"	f	class:Mtbf
destroyTbf	Mtbf.cpp	/^int MtbfGroup::destroyTbf(int pos)$/;"	f	class:MtbfGroup
getCAttr	Mtbf.cpp	/^	pthread_condattr_t* getCAttr()$/;"	f	struct:MGroupBase
getCond	Mtbf.cpp	/^pthread_cond_t* getCond(struct PrivateData* ptr, bool timeout, MDATA(Mtbf)* tbf)$/;"	f
getFreePos	Mtbf.cpp	/^	int getFreePos(Mtbf* tbf)$/;"	f	struct:MGroupBase
getFun	Mtbf.cpp	/^struct PrivateFun* getFun(struct PrivateData* p)$/;"	f
getMutex	Mtbf.cpp	/^pthread_mutex_t* getMutex(struct PrivateData* ptr, MDATA(Mtbf)* tbf)$/;"	f
getPos	Mtbf.cpp	/^int MtbfGroup::getPos(Mtbf*tbf)$/;"	f	class:MtbfGroup
getVaildTokens	Mtbf.cpp	/^int  Mtbf::getVaildTokens(int s)$/;"	f	class:Mtbf
isFull	Mtbf.cpp	/^int MtbfGroup::isFull()$/;"	f	class:MtbfGroup
isMember	Mtbf.cpp	/^int MtbfGroup::isMember(Mtbf* tbf)$/;"	f	class:MtbfGroup
main	main.cpp	/^int main()$/;"	f
operator []	Mtbf.cpp	/^Mtbf& MtbfGroup::operator[] (int pos)$/;"	f	class:MtbfGroup
pushCondWork	Mtbf.cpp	/^	int pushCondWork(Mtbf*ptr,  uint64_t threadnum, bool timeout = true)$/;"	f	struct:MGroupBase
pushTbf	Mtbf.cpp	/^void Mtbf::pushTbf(void *p)$/;"	f	class:Mtbf
pushTbf	Mtbf.cpp	/^void MtbfGroup::pushTbf()$/;"	f	class:MtbfGroup
pushTokens	Mtbf.cpp	/^int  Mtbf::pushTokens(int tokens)$/;"	f	class:Mtbf
setWaitClock	Mtbf.cpp	/^	struct timespec* setWaitClock(int ms)$/;"	f	struct:MGroupBase
sigact	Mtbf.cpp	/^	struct sigaction sigact;$/;"	m	struct:MGroupBase	typeref:struct:MGroupBase::sigaction	file:
sigoldaction	Mtbf.cpp	/^struct sigaction sigoldaction;$/;"	v	typeref:struct:sigaction
tbf	Mtbf.cpp	/^	pthread_cond_t* (*getCond)(MDATA(Mtbf)* tbf, bool timeout);$/;"	m	struct:PrivateFun	file:
tbf	Mtbf.cpp	/^	pthread_mutex_t* (*getMutex)(MDATA(Mtbf)* tbf);$/;"	m	struct:PrivateFun	file:
timeout	Mtbf.cpp	/^	pthread_cond_t* (*getCond)(MDATA(Mtbf)* tbf, bool timeout);$/;"	m	struct:PrivateFun	file:
timeout	Mtbf.cpp	/^	struct timeval timeout;$/;"	m	struct:MGroupBase	typeref:struct:MGroupBase::timeval	file:
timeout	Mtbf.cpp	/^pthread_cond_t* getPCond(MDATA(Mtbf)* tbf, bool timeout);$/;"	v
~MGroupBase	Mtbf.cpp	/^	~MGroupBase()$/;"	f	struct:MGroupBase
~Mtbf	Mtbf.cpp	/^Mtbf::~Mtbf()$/;"	f	class:Mtbf
~MtbfGroup	Mtbf.cpp	/^MtbfGroup::~MtbfGroup()$/;"	f	class:MtbfGroup
